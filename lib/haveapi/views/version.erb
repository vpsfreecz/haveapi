<% def render_resource_body(resource, info, prefix='root') %>
  <h2 class="resource" id="<%= "#{prefix}-#{resource}" %>"><%= resource.humanize %></h2>
  <div class="resource-body">
    <p><%= info[:description] %></p>

    <div class="actions">
      <% info[:actions].each do |action, info| %>
        <h3 id="<%= "#{prefix}-#{resource}-#{action}" %>"><%= resource.humanize %>.<%= action.capitalize %></h3>
        <div class="action">
          <dl>
            <dt>URL:</dt>
            <dd><%= info[:method] %> <%= info[:url] %></dd>
            <dt>Description:</dt>
            <dd><%= info[:description] %></dd>
            <dt>Authentication required:</dt>
            <dd><%= info[:auth] ? 'yes' : 'no' %></dd>
          </dl>

          <h4>Input parameters</h4>
          <div class="parameters">
            <% if info[:input][:parameters].empty? %>
              <p>No parameters.</p>
            <% else %>
              <dl>
                <dt>Layout:</dt>
                <dd><%= info[:input][:layout] %></dd>
                <dt>Namespace:</dt>
                <dd><%= info[:input][:namespace] %></dd>
              </dl>

              <table class="table table-striped table-hover">
                <tr>
                  <th>Label</th>
                  <th>Name</th>
                  <th>Required</th>
                  <th>Type</th>
                  <th>Validators</th>
                  <th>Description</th>
                </tr>
                <% info[:input][:parameters].each do |param, info| %>
                  <tr>
                    <td><%= info[:label] %></td>
                    <td><%= param %></td>
                    <td><%= info[:required] ? 'yes' : 'no' %></td>
                    <td><%= info[:type] %></td>
                    <td><%= info[:validators] %></td>
                    <td><%= info[:description] %></td>
                  </tr>
                <% end %>
              </table>
            <% end %>
          </div>

          <h4>Output parameters</h4>
          <div class="parameters">
            <% if info[:output][:parameters].empty? && info[:output][:format].nil? %>
              <p>No parameters.</p>
            <% else %>
              <dl>
                <dt>Layout:</dt>
                <dd><%= info[:output][:layout] %></dd>
                <dt>Namespace:</dt>
                <dd><%= info[:output][:namespace] %></dd>
              </dl>

              <table class="table table-striped table-hover">
                <tr>
                  <th>Label</th>
                  <th>Name</th>
                  <th>Type</th>
                  <th>Description</th>
                </tr>
                <% info[:output][:parameters].each do |param, info| %>
                  <tr>
                    <td><%= info[:label] %></td>
                    <td><%= param %></td>
                    <td><%= info[:type] %></td>
                    <td><%= info[:description] %></td>
                  </tr>
                <% end %>
              </table>
            <% end %>
          </div>

          <div class="action-self-description">
            <h4>Self-description</h4>
            <pre><code><%= JSON.pretty_generate(info) %></code></pre>
          </div>

          <% unless info[:example].empty? %>
            <h4>Example</h4>
            <p><%= info[:example][:comment] %></p>

            <h5>Request</h5>
            <pre><code><%= JSON.pretty_generate(info[:example][:request]) %></code></pre>

            <h5>Response</h5>
            <pre><code><%= JSON.pretty_generate(info[:example][:response]) %></code></pre>
          <% end %>

        </div>
      <% end %>
    </div>

    <% unless info[:resources].empty? %>
      <% info[:resources].each do |r, i| %>
        <% render_resource_body(r, i, "#{prefix}-#{resource}") %>
      <% end %>
    <% end %>

  </div> <!-- resource -->
<% end %>

<% def render_resource_nav(resource, info, prefix='root') %>
  <li>
    <a href="#<%= "#{prefix}-#{resource}" %>">.<%= resource.humanize %></a>

    <ul>
      <% info[:actions].each do |action, info| %>
        <li>
          <a href="#<%= "#{prefix}-#{resource}-#{action}" %>">#<%= action.capitalize %></a>
        </li>
      <% end %>

      <% info[:resources].each do |r, i| %>
        <% render_resource_nav(r, i, "#{prefix}-#{resource}") %>
      <% end %>
    </ul>
  </li>
<% end %>

<div class="row-fluid">
  <div class="col-sm-10">
    <h1 id="api">API v<%= @v %></h1>
    <p>
      This page contains a list of resources available in API v<%= @v %>, their actions,
      description, parameters and example usage.
    </p>
    <p>
      The API tries to be RESTful. It is divided into resources, which may be nested,
      and their actions (list, create, update, ...).
    </p>
    <p>
      Every action has assigned URL, which may be identical for several actions, but
      differ in HTTP method.
    </p>

    <h2 id="self-description">Self-description</h2>
    <p>
      This API is self-describing. It documents itself. Self-description is encoded
      in JSON and contains access URLs, HTTP methods, input and output parameters
      and their validators. A part of description is also an example usage and text
      notes.
    </p>
    <p>
      The API responds to <code>OPTIONS /</code>, which returns description of whole
      API, containing all its versions. To get description only of selected version,
      use e.g. <code>OPTIONS /v1/</code>.
    </p>
    <p>
      Every action also responds to HTTP method <code>OPTIONS</code>,
      with which you can get description for selected action. To distinguish actions with
      same URL, use parameter <code>?method=HTTP_METHOD</code>.
    </p>
    <p>
      Thanks to this ability, API changes immediately reflects in all clients without
      changing single line of code. A client can also be used on all APIs with compatible
      self-describing format, without any changes at all.
    </p>

    <h2 id="envelope">Envelope</h2>
    <p>
      In addition to output parameters specified below, every API response (except description)
      is wrapped in an envelope.
      The envelope reports if action succeeded or failed, provides return value or error
      messages.
    </p>
    <pre>
<code>
  {
    "status": true if action succeeded or false if error occured,
    "response": return value,
    "message": error message, if status is false,
    "errors: {
      "parameter1": ["list", "of", "errors"],
      "parameter2": ["and", "so", "on"]
    }
  }</code>
    </pre>

    <h2 id="authentication">Authentication</h2>
    <p>
      When action requires authentication, you have to login with HTTP basic auth.
    </p>

    <h2 id="authorization">Authorization</h2>
    <p>
      Actions may require different levels of authorization. This process is not
      self-described.
    </p>
    <p>
      If the user is authenticated when requesting self-description, only allowed
      resources/actions/parameters will be returned.
    </p>

    <h2 id="io">Input/output formats</h2>
    <p>
      For now, the only supported input/output format is JSON.
    </p>

    <h1 id="resources">Resources</h1>
    <p>Follows a list of all resources in this API and their actions.</p>

    <% @help[:resources].each do |resource, info| %>
      <% render_resource_body(resource, info) %>
    <% end %>
  </div>

  <div class="col-sm-2 table-of-contents">
    <div class="nav sidebar-nav-fixed" data-spy="affix" data-offset-top="100" data-offset-bottom="200">
      <h1>Authorization</h1>
      <p class="authentication">
        <% if current_user %>
          Logged as <%= current_user.login %> [<a class="logout" href="<%= logout_url %>">logout</a>]
        <% else %>
          <a class="login btn btn-default" href="<%= url("#{root}_login") %>">Login</a>
        <% end %>
      </p>
      <p>
        <% if current_user %>
          Listing only accessible resources, actions and parameters.
        <% else %>
          Listing all resources, actions and parameters.
        <% end %>
      </p>

      <h1>Contents</h1>
      <ul class="top-level">
        <li>
          <a href="#api">API v<%= @v %></a>
          <ul>
            <li><a href="#self-description">Self-description</a></li>
            <li><a href="#envelope">Envelope</a></li>
            <li><a href="#authentication">Authentication</a></li>
            <li><a href="#authorization">Authorization</a></li>
            <li><a href="#io">Input/output formats</a></li>
          </ul>
        </li>
        <li><a href="#resources">Resources</a></li>
        <% @help[:resources].each do |resource, info| %>
          <% render_resource_nav(resource, info) %>
        <% end %>
      </ul>
    </div>
  </div>
</div>

<script type="text/javascript">
  function getHTTPObject() {
    if (typeof XMLHttpRequest != 'undefined') {
      return new XMLHttpRequest();
    } try {
      return new ActiveXObject("Msxml2.XMLHTTP");
    } catch (e) {
      try {
        return new ActiveXObject("Microsoft.XMLHTTP");
      } catch (e) {}
    }
    return false;
  }

  $(document).ready(function(){
    // Login/logout user
    $('.authentication a.login').click(function(event){
      $.ajax({
        type: 'GET',
        url: this.href,
        async: false,
        success: function (){
          window.location.reload();
        }
      });

      event.preventDefault();
    });

    $('.authentication a.logout').click(function(event){
      $.ajax({
        type: 'GET',
        url: this.href,
        async: true,
        username: '_log',
        password: 'out',
        complete: function() {
          window.location.reload();
        }
      });

      event.preventDefault();
    });

    // Show/hide items in navigation
    $('ul.top-level ul').css('display', 'none');

    $('.table-of-contents').on('activate.bs.scrollspy', function(){
      var j = $(this);

      j.find('ul.top-level ul').css('display', 'none');
      j.find('ul.top-level li.active > ul').css('display', 'block');
    });

    // Show/hide button for help messages
    $('.action .action-self-description').each(function(i, el){
      // replace text by show/hide button
      var div = $(el);
      var pre = div.find('pre');
      var h4 = div.find('h4');
      h4.text('');

      h4.append(
        $('<button>')
          .attr('type', 'button')
          .addClass('btn btn-primary btn-sm')
          .text('Show self-description')
          .click(function(event) {
            var button = $(this);
            button.toggleClass('active');
            pre.toggle('fast');

            if(button.hasClass('active'))
              button.text('Hide self-description');
            else
              button.text('Show self-description');
          })
      );

      $(el).find('pre').hide();
    });
  });
</script>
