package <%= package %>

import (
<% if action.has_path_params? -%>
	"strings"
<% end -%>
)

// <%= action.go_type %> is a type for action <%= action.full_dot_name %>
type <%= action.go_type %> struct {
	// Pointer to client
	Client *Client
}

func New<%= action.go_type %>(client *Client) *<%= action.go_type %> {
	return &<%= action.go_type %>{
		Client: client,
	}
}

<% if action.metadata.has_global_input? -%>
// <%= action.metadata.global.input.go_type %> is a type for action global meta input parameters
type <%= action.metadata.global.input.go_type %> struct {
<% action.metadata.global.input.parameters.each do |p| -%>
	<%= p.go_name %> <%= p.go_in_type %> `json:"<%= p.name %>"`
<% end -%>
}
<% end -%>

<% if action.has_input? -%>
// <%= action.input.go_type %> is a type for action input parameters
type <%= action.input.go_type %> struct {
<% action.input.parameters.each do |p| -%>
	<%= p.go_name %> <%= p.go_in_type %> `json:"<%= p.name %>"`
<% end -%>
}
<% end -%>

<% if (action.has_input? || action.metadata.has_global_input?) && action.http_method != 'GET' -%>
// <%= action.go_request_type %> is a type for the entire action request
type <%= action.go_request_type %> struct {
<% if action.has_input? -%>
	<%= action.input.go_namespace %> map[string]interface{} `json:"<%= action.input.namespace %>"`
<% end -%>
<% if action.metadata.has_global_input? -%>
	Meta map[string]interface{} `json:"<%= action.resource.api_version.metadata_namespace %>"`
<% end -%>
}
<% end -%>

<% if action.has_output? -%>
// <%= action.output.go_type %> is a type for action output parameters
type <%= action.output.go_type %> struct {
<% action.output.parameters.each do |p| -%>
<% if p.association -%>
	<%= p.go_name %> *<%= p.go_out_type %> `json:"<%= p.name %>"`
<% else -%>
	<%= p.go_name %> <%= p.go_out_type %> `json:"<%= p.name %>"`
<% end -%>
<% end -%>
}
<% end -%>

<% if action.blocking? -%>
// <%= action.metadata.global.output.go_type %> is a type for global output metadata parameters
type <%= action.metadata.global.output.go_type %> struct {
<% action.metadata.global.output.parameters.each do |p| -%>
	<%= p.go_name %> <%= p.go_out_type %> `json:"<%= p.name %>"`
<% end -%>
}
<% end -%>

// Type for action response, including envelope
type <%= action.go_response_type %> struct {
	Action *<%= action.go_type %> `json:"-"`
	*Envelope
<% if action.has_output? -%>
<% if %w(hash object).include?(action.output.layout) -%>
	// Action output encapsulated within a namespace
	Response *struct {
		<%= action.output.go_namespace %> *<%= action.output.go_type %> `json:"<%= action.output.namespace %>"`
<% if action.blocking? -%>
		// Global output metadata
		Meta *<%= action.metadata.global.output.go_type %> `json:"<%= action.resource.api_version.metadata_namespace %>"`
<% end -%>
	}

	// Action output without the namespace
	Output *<%= action.output.go_type %>
<% elsif %w(hash_list object_list).include?(action.output.layout) -%>
	// Action output encapsulated within a namespace
	Response *struct {
		<%= action.output.go_namespace %> []*<%= action.output.go_type %> `json:"<%= action.output.namespace %>"`
<% if action.blocking? -%>
		// Global output metadata
		Meta *<%= action.metadata.global.output.go_type %> `json:"<%= action.resource.api_version.metadata_namespace %>"`
<% end -%>
	}

	// Action output without the namespace
	Output []*<%= action.output.go_type %>
<% end -%>
<% elsif action.blocking? -%>
	// Action output encapsulated within a namespace
	Response *struct {
		// Global output metadata
		Meta *<%= action.metadata.global.output.go_type %> `json:"<%= action.resource.api_version.metadata_namespace %>"`
	}
<% end -%>
}

<% if !action.has_path_params? && !action.has_input? -%>
// Call the action directly without any path or input parameters
func (action *<%= action.go_type %>) Call() (*<%= action.go_response_type %>, error) {
	return action.Prepare().Call()
}
<% end -%>

// Prepare the action for invocation
func (action *<%= action.go_type %>) Prepare() *<%= action.go_invocation_type%> {
	return &<%= action.go_invocation_type %>{
		Action: action,
		Path: "<%= action.path %>",
	}
}

// <%= action.go_invocation_type %> is used to configure action for invocation
type <%= action.go_invocation_type %> struct {
	// Pointer to the action
	Action *<%= action.go_type %>

	// Path which may contain parameters that need to be set
	Path string
<% if action.has_input? -%>
	// Input parameters
	Input *<%= action.input.go_type %>

	// Only selected parameters are sent to the API. Ignored if empty.
	SelectedParameters map[string]interface{}
<% end -%>
<% if action.metadata.has_global_input? -%>
	// Global meta input parameters
	MetaInput *<%= action.metadata.global.input.go_type %>

	// Only selected parameters are sent to the API. Ignored if empty.
	SelectedMetaParameters map[string]interface{}
<% end -%>
}

<% if action.has_path_params? -%>
// SetPathParamInt sets integer path parameter
func (inv *<%= action.go_invocation_type %>) SetPathParamInt(param string, value int64) *<%= action.go_invocation_type %> {
	return inv.SetPathParamString(param, convertInt64ToString(value))
}

// SetPathParamString sets string path parameter
func (inv *<%= action.go_invocation_type %>) SetPathParamString(param string, value string) *<%= action.go_invocation_type %> {
	inv.Path = strings.Replace(inv.Path, ":"+param, value, 1)
	return inv
}
<% end -%>

<% if action.has_input? -%>
// SetInput provides input parameters to send to the API
func (inv *<%= action.go_invocation_type %>) SetInput(input *<%= action.input.go_type %>) *<%= action.go_invocation_type %> {
	inv.Input = input
	return inv
}

// IsParameterSelected returns true if param is to be sent to the API
func (inv *<%= action.go_invocation_type %>) IsParameterSelected(param string) bool {
	if inv.SelectedParameters == nil {
		return true
	}

	_, exists := inv.SelectedParameters[param]
	return exists
}

// SelectParameters sets parameters from <%= action.input.go_type %>
// that will be sent to the API.
// SelectParameters can be called multiple times.
func (inv *<%= action.go_invocation_type %>) SelectParameters(params ...string) *<%= action.go_invocation_type %> {
	if inv.SelectedParameters == nil {
		inv.SelectedParameters = make(map[string]interface{})
	}

	for _, param := range params {
		inv.SelectedParameters[param] = nil
	}

	return inv
}
<% end -%>
<% if action.metadata.has_global_input? -%>
// SetMetaInput provides global meta input parameters to send to the API
func (inv *<%= action.go_invocation_type %>) SetMetaInput(input *<%= action.metadata.global.input.go_type %>) *<%= action.go_invocation_type %> {
	inv.MetaInput = input
	return inv
}

// IsMetaParameterSelected returns true if global meta param is to be sent to the API
func (inv *<%= action.go_invocation_type %>) IsMetaParameterSelected(param string) bool {
	if inv.SelectedMetaParameters == nil {
		return true
	}

	_, exists := inv.SelectedMetaParameters[param]
	return exists
}

// SelectMetaParameters sets parameters from <%= action.metadata.global.input.go_type %>
// that will be sent to the API.
// SelectMetaParameters can be called multiple times.
func (inv *<%= action.go_invocation_type %>) SelectMetaParameters(params ...string) *<%= action.go_invocation_type %> {
	if inv.SelectedMetaParameters == nil {
		inv.SelectedMetaParameters = make(map[string]interface{})
	}

	for _, param := range params {
		inv.SelectedMetaParameters[param] = nil
	}

	return inv
}
<% end -%>

// Call() invokes the action and returns a response from the API server
func (inv *<%= action.go_invocation_type %>) Call() (*<%= action.go_response_type %>, error) {
<% if action.http_method == 'GET' -%>
	return inv.callAsQuery()
<% else -%>
	return inv.callAsBody()
<% end -%>
}

<% if action.http_method == 'GET' -%>
func (inv *<%= action.go_invocation_type %>) callAsQuery() (*<%= action.go_response_type %>, error) {
	queryParams := make(map[string]string)
<% if action.has_input? -%>
	inv.convertInputToQueryParams(queryParams)
<% end -%>
<% if action.metadata.has_global_input? -%>
	inv.convertMetaInputToQueryParams(queryParams)
<% end -%>
	resp := &<%= action.go_response_type %>{Action: inv.Action}
	err := inv.Action.Client.DoQueryStringRequest(inv.Path, queryParams, resp)
<% if action.has_output? -%>
	if err == nil && resp.Status {
		resp.Output = resp.Response.<%= action.output.go_namespace %>
	}
<% end -%>
	return resp, err
}
<% end -%>

<% if action.http_method != 'GET' -%>
func (inv *<%= action.go_invocation_type %>) callAsBody() (*<%= action.go_response_type %>, error) {
<% if action.has_input? || action.metadata.has_global_input? -%>
	input := inv.makeAllInputParams()
<% else -%>
	input := make(map[string]interface{})
<% end -%>
	resp := &<%= action.go_response_type %>{Action: inv.Action}
	err := inv.Action.Client.DoBodyRequest("<%= action.http_method %>", inv.Path, input, resp)
<% if action.has_output? -%>
	if err == nil && resp.Status {
		resp.Output = resp.Response.<%= action.output.go_namespace %>
	}
<% end -%>
	return resp, err
}
<% end -%>

<% if action.blocking? -%>
// IsBlocking checks whether the current invocation resulted in a blocking operation
func (resp *<%= action.go_response_type %>) IsBlocking() bool {
	return resp.Response.Meta != nil && resp.Response.Meta.ActionStateId > 0
}

// OperationStatus queries the current state of the blocking operation
func (resp *<%= action.go_response_type %>) OperationStatus() (*ActionActionStateShowResponse, error) {
	req := resp.Action.Client.ActionState.Show.Prepare()
	req.SetPathParamInt("action_state_id", resp.Response.Meta.ActionStateId)
	return req.Call()
}

// WaitForOperation waits for a blocking operation to finish
func (resp *<%= action.go_response_type %>) WaitForOperation(timeout float64) (*ActionActionStatePollResponse, error) {
	req := resp.Action.Client.ActionState.Poll.Prepare()
	req.SetPathParamInt("action_state_id", resp.Response.Meta.ActionStateId)
	req.SetInput(&ActionActionStatePollInput{
		Timeout: timeout,
	})
	req.SelectParameters("Timeout")
	return req.Call()
}

// WatchOperation waits for a blocking operation to finish and calls a callback
// function with progress updates
func (resp *<%= action.go_response_type %>) WatchOperation(timeout float64, updateIn float64, callback OperationProgressCallback) (*ActionActionStatePollResponse, error) {
	req := resp.Action.Client.ActionState.Poll.Prepare()
	req.SetPathParamInt("action_state_id", resp.Response.Meta.ActionStateId)
	req.SetInput(&ActionActionStatePollInput{
		Timeout: timeout,
		UpdateIn: updateIn,
	})
	req.SelectParameters("Timeout", "UpdateIn")
	pollResp, err := req.Call()

	if err != nil {
		return pollResp, err
	} else if pollResp.Output.Finished {
		return pollResp, nil
	}

	if callback(pollResp.Output) == StopWatching {
		return pollResp, nil
	}

	for {
		req = resp.Action.Client.ActionState.Poll.Prepare()
		req.SetPathParamInt("action_state_id", resp.Response.Meta.ActionStateId)
		req.SetInput(&ActionActionStatePollInput{
			Timeout: timeout,
			UpdateIn: updateIn,
			Status: pollResp.Output.Status,
			Current: pollResp.Output.Current,
			Total: pollResp.Output.Total,
		})
		pollResp, err = req.Call()

		if err != nil {
			return pollResp, err
		} else if pollResp.Output.Finished {
			return pollResp, nil
		}

		if callback(pollResp.Output) == StopWatching {
			return pollResp, nil
		}
	}
}

// CancelOperation cancels the current blocking operation
func (resp *<%= action.go_response_type %>) CancelOperation() (*ActionActionStateCancelResponse, error) {
	req := resp.Action.Client.ActionState.Cancel.Prepare()
	req.SetPathParamInt("action_state_id", resp.Response.Meta.ActionStateId)
	return req.Call()
}
<% end -%>

<% if action.http_method == 'GET' && action.has_input? -%>
func (inv *<%= action.go_invocation_type %>) convertInputToQueryParams(ret map[string]string) {
	if inv.Input != nil {
<% action.input.parameters.each do |p| -%>
		if inv.IsParameterSelected("<%= p.go_name %>") {
			ret["<%= action.input.namespace %>[<%= p.name %>]"] = <% if p.go_in_type == 'string' %>inv.Input.<%= p.go_name %><% else %>convert<%= p.go_in_type.capitalize %>ToString(inv.Input.<%= p.go_name %>)<% end %>
		}
<% end -%>
	}
}
<% end -%>

<% if action.http_method == 'GET' && action.metadata.has_global_input? -%>
func (inv *<%= action.go_invocation_type %>) convertMetaInputToQueryParams(ret map[string]string) {
	if inv.MetaInput != nil {
<% action.metadata.global.input.parameters.each do |p| -%>
		if inv.IsMetaParameterSelected("<%= p.go_name %>") {
			ret["<%= action.resource.api_version.metadata_namespace %>[<%= p.name %>]"] = <% if p.go_in_type == 'string' %>inv.MetaInput.<%= p.go_name %><% else %>convert<%= p.go_in_type.capitalize %>ToString(inv.MetaInput.<%= p.go_name %>)<% end %>
		}
<% end -%>
	}
}
<% end -%>

<% if action.http_method != 'GET' && (action.has_input? || action.metadata.has_global_input?) -%>
func (inv *<%= action.go_invocation_type %>) makeAllInputParams() *<%= action.go_request_type %> {
	return &<%= action.go_request_type %>{
<% if action.has_input? -%>
		<%= action.input.go_namespace %>: inv.makeInputParams(),
<% end -%>
<% if action.metadata.has_global_input? -%>
		Meta: inv.makeMetaInputParams(),
<% end -%>
	}
}

<% if action.has_input? -%>
func (inv *<%= action.go_invocation_type %>) makeInputParams() map[string]interface{} {
	ret := make(map[string]interface{})

	if inv.Input != nil {
<% action.input.parameters.each do |p| -%>
		if inv.IsParameterSelected("<%= p.go_name %>") {
			ret["<%= p.name %>"] = inv.Input.<%= p.go_name %>
		}
<% end -%>
	}

	return ret
}
<% end -%>

<% if action.metadata.has_global_input? -%>
func (inv *<%= action.go_invocation_type %>) makeMetaInputParams() map[string]interface{} {
	ret := make(map[string]interface{})

	if inv.MetaInput != nil {
<% action.metadata.global.input.parameters.each do |p| -%>
		if inv.IsMetaParameterSelected("<%= p.go_name %>") {
			ret["<%= p.name %>"] = inv.MetaInput.<%= p.go_name %>
		}
<% end -%>
	}

	return ret
}
<% end -%>
<% end -%>
